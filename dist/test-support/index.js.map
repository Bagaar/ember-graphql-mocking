{"version":3,"file":"index.js","sources":["../../src/test-support/index.ts"],"sourcesContent":["import { assert } from '@ember/debug';\nimport { buildASTSchema, graphql, type DocumentNode } from 'graphql';\nimport { graphql as mswGraphql, HttpResponse } from 'msw';\nimport { setupWorker, type SetupWorker, type StartOptions } from 'msw/browser';\n\ninterface Options {\n  mswStartOptions: StartOptions;\n}\n\ntype WindowWithTestem = typeof window & { Testem: unknown };\n\ntype Hooks = {\n  after(fn: () => void | Promise<void>): void;\n  afterEach(fn: () => void | Promise<void>): void;\n  before(fn: () => void | Promise<void>): void;\n  beforeEach(fn: () => void | Promise<void>): void;\n};\n\nconst IS_TESTEM = Boolean((window as WindowWithTestem).Testem);\nconst DEFAULT_OPTIONS: Options = {\n  mswStartOptions: {\n    quiet: IS_TESTEM,\n    serviceWorker: {\n      options: {\n        scope: IS_TESTEM ? window.location.pathname : '/tests',\n      },\n    },\n  },\n};\n\nlet isSetupGraphqlTestCalled = false;\nlet root: object | null = null;\nlet worker: SetupWorker | null = null;\nlet options: Options | null = null;\n\nexport async function setupEmberGraphqlMocking(\n  schemaDocument: DocumentNode,\n  providedOptions?: Options,\n) {\n  options = { ...DEFAULT_OPTIONS, ...providedOptions };\n  createWorker();\n  createGraphqlOperationHandler(schemaDocument);\n}\n\nexport function setupGraphqlTest(hooks: Hooks) {\n  assert(\n    'Cannot call `setupGraphqlTest` without providing the `hooks` argument. Please make sure to call `setupGraphqlTest(hooks);`.',\n    hooks,\n  );\n\n  hooks.before(() => {\n    isSetupGraphqlTestCalled = true;\n  });\n\n  hooks.after(() => {\n    isSetupGraphqlTestCalled = false;\n  });\n\n  hooks.beforeEach(async () => {\n    await startWorker(options?.mswStartOptions || {});\n  });\n\n  hooks.afterEach(() => {\n    stopWorker();\n    clearRoot();\n  });\n}\n\nexport function mockResolvers(resolvers: object) {\n  assert(\n    'Cannot call `mockResolvers` before calling `setupGraphqlTest`. Please make sure to call `setupGraphqlTest(hooks);`.',\n    isSetupGraphqlTestCalled,\n  );\n\n  root = { ...root, ...resolvers };\n}\n\nexport function getWorker() {\n  assert(\n    'Cannot call `getWorker` before calling `setupEmberGraphqlMocking`. Please make sure to call `setupEmberGraphqlMocking(yourSchemaDocument[, yourProvidedOptions]);`.',\n    worker,\n  );\n\n  return worker;\n}\n\nexport function stopWorker() {\n  assert(\n    'Cannot call `destroyWorker` before calling `setupEmberGraphqlMocking`. Please make sure to call `setupEmberGraphqlMocking(yourSchemaDocument[, yourProvidedOptions]);`.',\n    worker,\n  );\n\n  worker.stop();\n}\n\nfunction createWorker() {\n  worker = setupWorker();\n}\n\nfunction createGraphqlOperationHandler(schemaDocument: DocumentNode) {\n  assert('[BUG] `worker` is not set.', worker);\n\n  const schema = buildASTSchema(schemaDocument);\n  const graphqlOperation = mswGraphql.operation(async ({ request }) => {\n    const { query, variables } = (await request.json()) || {\n      query: '',\n      variables: {},\n    };\n\n    const { data, errors } = await graphql({\n      rootValue: root,\n      schema,\n      source: query,\n      variableValues: variables,\n    });\n\n    // @ts-expect-error latest versions of msw return a type which is ObjMap<unknown> | null | undefined, which seems incompatible with the .json() method\n    return HttpResponse.json({ data, errors });\n  });\n\n  worker.use(graphqlOperation);\n}\n\nasync function startWorker(mswStartOptions: Options['mswStartOptions']) {\n  assert('[BUG] `worker` is not set.', worker);\n\n  await worker.start(mswStartOptions);\n}\n\nfunction clearRoot() {\n  root = null;\n}\n"],"names":["IS_TESTEM","Boolean","window","Testem","DEFAULT_OPTIONS","mswStartOptions","quiet","serviceWorker","options","scope","location","pathname","isSetupGraphqlTestCalled","root","worker","setupEmberGraphqlMocking","schemaDocument","providedOptions","createWorker","createGraphqlOperationHandler","setupGraphqlTest","hooks","assert","before","after","beforeEach","startWorker","afterEach","stopWorker","clearRoot","mockResolvers","resolvers","getWorker","stop","setupWorker","schema","buildASTSchema","graphqlOperation","mswGraphql","operation","request","query","variables","json","data","errors","graphql","rootValue","source","variableValues","HttpResponse","use","start"],"mappings":"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"}